#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# Copyright (C) 2013 <Carlos PÃ©rez Penichet> <cperezpenichet@gmail.com>
#This program is free software: you can redistribute it and/or modify it 
#under the terms of the GNU General Public License version 3, as published 
#by the Free Software Foundation.
#
#This program is distributed in the hope that it will be useful, but 
#WITHOUT ANY WARRANTY; without even the implied warranties of 
#MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
#PURPOSE.  See the GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License along 
#with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

__metaclass__ = type

from cwiid import X, Y, Z 
from gtk.gdk import threads_init
from matplotlib.backends.backend_gtkagg import FigureCanvasGTKAgg as FigureCanvas
from matplotlib.figure import Figure
from scipy import correlate
from time import sleep
import csv
import cwiid
import gobject
import gtk
import os
import sys
import threading
import time

# Check if we are working in the source tree or from the installed 
# package and mangle the python path accordingly
if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()
sys.path.insert(0, os.path.dirname(fullPath))

from xraters import AboutXratersDialog, PreferencesXratersDialog
from xraters.WiiConnectionMaker import WiiConnectionMaker
from xraters.xratersconfig import getdatapath
from xraters.zStar import zStar, DATARATE_30_HZ, MODE_8_BITS, GSELECT_2_G, GSELECT_4_G, GSELECT_8_G

threeAxes = [X,Y,Z]

class XratersWindow(gtk.Window):
    __gtype_name__ = "XratersWindow"
    
    def __init__(self):
        """__init__ - This function is typically not called directly.
        Creation a XratersWindow requires redeading the associated ui
        file and parsing the ui definition extrenally,
        and then calling XratersWindow.finish_initializing().

        Use the convenience function NewXratersWindow to create
        XratersWindow object.

        """
        self._PATTERN = 17 * [1]
        self._PATTERN.extend(17 * [-1])
        
        self._wii_acc_cal = ((510, 486, 515),
                             (729, 705, 722))
        self._zStarAccRange = (8, 2, 4)
        self._zStar_acc_cal = ((0,0,0),
                               (1,1,1))
        self._acc = [0, 0, 0]
        self._connected = False
        self._wiiMote = None
        self._resetData()
        self._wiiDataLock = threading.Lock()
        self._zStarDataLock = threading.Lock()
        self._led = 0
        self._rumble = 0
        self._zStar = None
        
    isConnected = property(lambda self: self._connected)
    
    def callback(funct):
        """A decorator used to require connection to the Wii Remote
        
        This decorator is used to implement the precondition that 
        the Wii Remote must be connected. 
        """
        def _callback(cls, *args, **kwds):
            if cls.isConnected:
                funct(cls, *args, **kwds)
                return True
            else:
                return False
        return _callback
    
    def _connectCallback(self, connectionMaker):
        """Callback function called upon successful connection to the Wiimote
        """
        if connectionMaker.connected:
            self._connected = True
            self._wiiMote = connectionMaker.wiiMote
            self._resetData()
            self.widget('actionDisconnect').set_sensitive(True)
            self.widget('actionSave').set_sensitive(True)
            self.widget('actionArm').set_sensitive(True)
            self.widget('actionReset').set_sensitive(True)
            self.widget('actionPause').set_sensitive(True)
            self.widget('toolbutton1').set_related_action(self.widget('actionDisconnect'))
            self.widget('toolbutton3').set_related_action(self.widget('actionArm'))
            self._wiiMote.mesg_callback = self._getWiiAcc
            gobject.timeout_add(45, self._drawWiiAcc)
            self._updBatteryLevel()
            gobject.timeout_add_seconds(60, self._updBatteryLevel)
            
            self._zStar = zStar(self.preferences['zStarAddress'])
            self._zStar.set_mode(MODE_8_BITS)
            self._zStar.set_datarate(DATARATE_30_HZ)
            self._zStar.do_Handshake()
            self._zStar.mesg_callback = self._getZStarAcc
            self._zStar.set_gSelect(int(self.preferences['zStarAccRange']))
            self._zStar_acc_cal = self._zStar.get_calibration()
            self._zStar.burst_on()
            gobject.timeout_add(45, self._drawZStarAcc)
        else:
            self.widget('actionWiiConnect').set_sensitive(True)
            
    @callback
    def _upd_background(self, event):
        """Keep a copy of the figure background
        """
        self.__background = self._accCanvas.copy_from_bbox(self._wiiAccAxis.bbox)
        
    def _Leds_off (self, mask):
        """Set the desired LEDs OFF while NOT modifying any other
    
        mask is a bit mask for the LEDs to turn off.
        """ 
        self._led &= (not mask)
        self._wiiMote.led = self._led
        
    def _Leds_on(self, mask):
        """Set the desired LEDs ON while NOT modifying any other
    
        mask is a bit mask for the LEDs to turn on.
        """
        self._led |= mask
        self._wiiMote.led = self._led

    def _arm(self):
        self._wiiMote.rumble = 1
        self._Leds_on(cwiid.LED3_ON)
        self._armed = True
        
    def _disarm(self):
        self._wiiMote.rumble = 0
        self._Leds_off(cwiid.LED3_ON)
        self._armed = False
        
    def _takePicture(self):
        self._Leds_off(cwiid.LED3_ON)
        sleep(0.005)
        self._Leds_on(cwiid.LED3_ON)
        sleep(0.020)        
        self._Leds_off(cwiid.LED3_ON)
        
    def _shootBall(self):
        self._Leds_on(cwiid.LED4_ON)
        sleep(0.05)
        self._Leds_off(cwiid.LED4_ON)
        
    def _getZStarAcc(self, messages, theTime=0):
        for msg in messages:
            acc = float(
                        msg[2][self.preferences['zStarAxis']]-\
                        self._zStar_acc_cal[0][self.preferences['zStarAxis']]
                       )
            acc /= self._zStar_acc_cal[1][self.preferences['zStarAxis']]-\
                    self._zStar_acc_cal[0][self.preferences['zStarAxis']]
            acc /= 2.0
            acc *= self._zStarAccRange[int(self.preferences['zStarAccRange'])]
            with self._zStarDataLock:
#                self._zStarTime.append(msg[1]/1000000.0)
                self._zStarTime.append(msg[1]-self._startTime)
#                self._zSdata.append(msg[2][self.preferences['zStarAxis']])
                self._zSdata.append(acc)
                
            # We only keep about 6 seconds worth of data if the experiment
            # has not started but keep everything after the fall starts.
            if (self._zStarTime[-1] - self._zStarTime[0] > 6) and \
                ((not self._draw) or \
                ((self._moveTime - self._zStarTime[0] > 2))):
                with self._zStarDataLock:
                    self._zStarTime.pop(0)
                    self._zSdata.pop(0)
    
    def _getWiiAcc(self, messages, theTime=0):
        """Process acceleration messages from the Wiimote
        
        This function is intended to be set as cwiid.mesg_callback
        """
        if self._Paused:
            return
        for msg in messages:
            if msg[0] == cwiid.MESG_ACC:
                # Normalize data using calibration info
                for i, axisAcc in enumerate(msg[1]):
                    self._acc[i] = float(axisAcc-self._wii_acc_cal[0][i])
                    self._acc[i] /=(self._wii_acc_cal[1][i]\
                                    -self._wii_acc_cal[0][i])
                    self._acc[i] /= 1.5
                    self._acc[i] *= self.preferences['wiiAccRange']
                with self._wiiDataLock:
                    # Store time and acceleration in the respective arrays
                    self._wiiTime.append(theTime-self._startTime)
                    [self._accData[i].append(self._acc[i]) for i in threeAxes]
                    # Compute correlation function
                    l = len(self._accData[self.preferences['wiiAxis']])
                    c = abs(correlate(self._PATTERN, 
                            self._accData[self.preferences['wiiAxis']][l-len(self._PATTERN):l])[-1])
                    # If correlation is above threshold mark the time and
                    # start the experiment
                    if (not self._moving) and self._armed and \
                        (c > self.preferences['corrThreshold']):
                        self._moveTime = self._wiiTime[-1]
                        self._moving = True
                        gobject.timeout_add(self.preferences['photoDelay'],
                                            self._takePicture)
                        gobject.timeout_add(self.preferences['fireDelay'],
                                            self._shootBall)
                        
                # We only keep about 6 seconds worth of data if the experiment
                # has not started but keep everything after the fall starts.
                if (self._wiiTime[-1] - self._wiiTime[0] > 6) and \
                    ((not self._draw) or \
                    ((self._moveTime - self._wiiTime[0] > 2))):
                    with self._wiiDataLock:
                        self._wiiTime.pop(0)
                        [self._accData[i].pop(0) for i in threeAxes]

    @callback
    def _drawWiiAcc(self):
        """Update the acceleration graph for the Wii Remote
        
        """
        # Do nothing while paused or there's no data available
        if self._Paused or len(self._wiiTime)==0:
            return
        draw_flag = False
        # Update axes limits if the data fall out of range 
        lims = self._wiiAccAxis.get_xlim()
        if self._wiiTime[-1] > lims[1]:
            self._wiiAccAxis.set_xlim(lims[0], lims[1]+2)
            lims = self._wiiAccAxis.get_xlim()
            draw_flag = True
        if (self._wiiTime[-1] - lims[0] > 6) and \
            ((not self._draw) or \
             (self._draw and (self._moveTime - lims[0] > 2))):
            self._wiiAccAxis.set_xlim(lims[0]+2, lims[1])
            draw_flag = True
        # Mark the start of the experiment with a vertical line
        if (not self._draw) and self._moving:
            self._draw = True
            self._vline = self._wiiAccAxis.axvline(self._moveTime, color="k", 
                                                                linestyle="--")
            draw_flag = True
        if draw_flag:
            gobject.idle_add(self._accCanvas.draw)
        # Do the actual update of the background
        if self.__background != None:
            self._accCanvas.restore_region(self.__background)
        # Do the actual update of the lines
        with self._wiiDataLock:
            [self._wiiLines[i].set_data(self._wiiTime, self._accData[i]) for i in threeAxes]
        [self._wiiAccAxis.draw_artist(self._wiiLines[i]) for i in threeAxes]
        self._accCanvas.blit(self._wiiAccAxis.bbox)
        
    @callback
    def _drawZStarAcc(self):
        """Update the acceleration graph for the zStar3
        
        """
        # Do nothing while paused or there's no data available
        if self._Paused or len(self._zStarTime)==0:
            return
        draw_flag = False
        # Update axes limits if the data fall out of range 
        lims = self._zStarAccAxis.get_xlim()
        if self._zStarTime[-1] > lims[1]:
            self._zStarAccAxis.set_xlim(lims[0], lims[1]+2)
            lims = self._zStarAccAxis.get_xlim()
            draw_flag = True
        if (self._zStarTime[-1] - lims[0] > 6) and \
            ((not self._draw) or \
             (self._draw and (self._moveTime - lims[0] > 2))):
            self._zStarAccAxis.set_xlim(lims[0]+2, lims[1])
            draw_flag = True
        # Mark the start of the experiment with a vertical line
        if (not self._draw) and self._moving:
            self._draw = True
            self._vline = self._zStarAccAxis.axvline(self._moveTime, color="k", 
                                                                linestyle="--")
            draw_flag = True
        if draw_flag:
            gobject.idle_add(self._accCanvas.draw)
        # Do the actual update of the background
        if self.__background != None:
            self._accCanvas.restore_region(self.__background)
        # Do the actual update of the lines
        with self._zStarDataLock:
            self._zStarLines[0].set_data(self._zStarTime, self._zSdata)
        self._zStarAccAxis.draw_artist(self._zStarLines[0])
        self._accCanvas.blit(self._zStarAccAxis.bbox)

    @callback
    def _updBatteryLevel(self):
        """Callback to update the battery indicator in the status bar
        
        """
        self._wiiMote.request_status()
        self._setBatteryIndicator(float(self._wiiMote.state['battery']) / 
                                  cwiid.BATTERY_MAX)
        
    def _setBatteryIndicator(self, level):
        """Actually update the battery indicator in the status bar
        
        """
        progressBar = self.widget("progressbarBattery")
        progressBar.set_fraction(level)
        progressBar.set_text("Battery: %.0f%%" % (level * 100))
    
    def _resetData(self):
        """Reset stored data and status flags to their defaults
        
        """
        self._accData = [list(), list(), list()]
        self._wiiTime = list()
        self._zStarTime = list()
        self._startTime = time.time()
        self._armed = False
        self._moving = False
        self._draw = False
        self._moveTime = self._startTime
        self._Paused = False
        self._zSdata = list()
        
    def widget(self, name):
        """Helper function to retrieve widget handlers
        
        """ 
        return self.builder.get_object(name)

    def finish_initializing(self, builder):
        """finish_initalizing should be called after parsing the ui definition
        and creating a XratersWindow object with it in order to finish
        initializing the start of the new XratersWindow instance.

        """
        #get a reference to the builder and set up the signals
        self.builder = builder
        self.builder.connect_signals(self)
        
        #uncomment the following code to read in preferences at start up
        dlg = PreferencesXratersDialog.NewPreferencesXratersDialog()
        self.preferences = dlg.get_preferences()

        #code for other initialization actions should be added here
        self._accFigure = Figure(figsize=(8,6), dpi=72)
        self._zStarAccAxis = self._accFigure.add_subplot(212)
        self._zStarAccAxis.set_xlabel("time (s)")
        self._zStarAccAxis.set_ylabel("acceleration (g)")
        self._zStarLines = self._zStarAccAxis.plot(
                                              self._zStarTime, self._zSdata,
                                              animated = True)
        self._zStarAccAxis.set_xlim(0, 2)
        tmp = self._zStarAccRange[int(self.preferences['zStarAccRange'])]
        self._zStarAccAxis.set_ylim(-tmp, tmp)
        
        self._wiiAccAxis = self._accFigure.add_subplot(211, 
                                                       sharex=self._zStarAccAxis)
        self._wiiAccAxis.set_ylabel("gravity (g)")
        self._wiiLines = self._wiiAccAxis.plot(
                                         self._wiiTime, self._accData[X],
                                         self._wiiTime, self._accData[Y],
                                         self._wiiTime, self._accData[Z], 
                                         animated=True)
        self._wiiAccAxis.set_xlim(0, 2)
        self._wiiAccAxis.set_ylim(-self.preferences['wiiAccRange'], 
                                  self.preferences['wiiAccRange'])

        self._accFigure.legend((self._wiiLines, self._zStarLines), 
                               ( "X", "Y", "Z", "ZStar3"), 
                               'upper center', 
                               ncol=4)

        self._accCanvas = FigureCanvas(self._accFigure)
        self._accCanvas.mpl_connect("draw_event", self._upd_background)
        self.__background = self._accCanvas.copy_from_bbox(self._wiiAccAxis.bbox)
        self._accCanvas.show()
        self._accCanvas.set_size_request(600, 400)
        vbMain = self.widget("vboxMain")
        vbMain.pack_start(self._accCanvas, True, True)
        vbMain.show()
        vbMain.reorder_child(self._accCanvas, 2)
        self._setBatteryIndicator(0)
        
    def about(self, widget, data=None):
        """about - display the about box for xraters """
        about = AboutXratersDialog.NewAboutXratersDialog()
        response = about.run()
        about.destroy()

    def preferences(self, widget, data=None):
        """preferences - display the preferences window for xraters """
        prefs = PreferencesXratersDialog.NewPreferencesXratersDialog()
        response = prefs.run()
        if response == gtk.RESPONSE_OK:
            #make any updates based on changed preferences here
            self.preferences = prefs.get_preferences()
            self._wiiAccAxis.set_ylim(-self.preferences['wiiAccRange'], 
                                    self.preferences['wiiAccRange'])
            tmp = self._zStarAccRange[int(self.preferences['zStarAccRange'])]
            self._zStarAccAxis.set_ylim(-tmp, tmp)
            self._accCanvas.draw()
        prefs.destroy()

    def quit(self, widget, data=None):
        """quit - signal handler for closing the XratersWindow"""
        self.destroy()

    def on_destroy(self, widget, data=None):
        """on_destroy - called when the XratersWindow is close. """
        #clean up code for saving application state should be added here
        if self.isConnected:
            self.on_wiiDisconnect(widget, data)
        gtk.main_quit()
        
    def on_wiiConnect(self, widget, data=None):
        """Signal handler for the WiiConnect action
        
        """
        self.widget('actionWiiConnect').set_sensitive(False)
        connectionMaker = WiiConnectionMaker(self.preferences['wiiAddress'],
                                             self.widget("statusbar"),
                                             self._connectCallback)
        self._wiiAccAxis.set_xlim(0, 2)
        gobject.idle_add(self._accCanvas.draw)
        connectionMaker.start()

    def on_wiiDisconnect(self, widget, data=None):
        """Signal handler for the WiiDisconnect action
        
        """
        self._wiiMote.close()
        self._zStar.stop()
        self._connected = False
        self.widget('actionDisconnect').set_sensitive(False)
        self.widget('actionWiiConnect').set_sensitive(True)
        self.widget('actionReset').set_sensitive(False)
        self.widget('actionArm').set_sensitive(False)
        self.widget('actionPause').set_sensitive(False)
        self.widget('toolbutton3').set_related_action(self.widget('actionArm'))
        self.widget('toolbutton1').set_related_action(self.widget('actionWiiConnect'))
        self.widget('actionSave').set_sensitive(True)
        self.widget('statusbar').pop(self.widget("statusbar").get_context_id(''))
        self._setBatteryIndicator(0)
        
    def on_Arm(self, widget, data=None):
        """Signal handler for the arm action
        
        """
        self.widget('actionArm').set_sensitive(False)
        self.widget('actionDisarm').set_sensitive(True)
        self.widget('toolbutton3').set_related_action(self.widget('actionDisarm'))
        self._arm()
        
    def on_Disarm(self, widget, data=None):
        """Signal handler for the disarm action
        
        """
        self.widget('actionArm').set_sensitive(True)
        self.widget('actionDisarm').set_sensitive(False)
        self.widget('toolbutton3').set_related_action(self.widget('actionArm'))
        self._disarm()
        
    def on_Reset(self, widget, data=None):
        """Signal handler for the reset action
        
        """
        if self._draw:
            self._vline.remove()
        self._resetData()
        self._wiiAccAxis.set_xlim(0, 2)
        self._zStarAccAxis.set_xlim(0, 2)
        gobject.idle_add(self._accCanvas.draw)
        self.on_Disarm(widget, data)
        
    def on_Pause(self, widge, data=None):
        """Signal handler for the pause action
        
        """
        if not self._Paused:
            self.widget('actionPause').set_short_label("Un_pause")
        else:
            self.widget('actionPause').set_short_label("_Pause")
        self._Paused = not (self._Paused)        

    def _save_WiiData(self, timeStr):
        fileName = os.sep.join([self.preferences['outputDir'], 
                                timeStr + "_Wii_acc" + ".dat"]
                              )
        try:
            with open(fileName, 'wb') as outFile:
                writer = csv.writer(outFile, 'excel-tab')
                outFile.write(writer.dialect.delimiter.join(("#time", "Ax", "Ay", "Az")))
                outFile.write(writer.dialect.lineterminator)
                outFile.write(writer.dialect.delimiter.join(("#s", "g", "g", "g")))
                outFile.write(writer.dialect.lineterminator)
                with self._wiiDataLock:
                    writer.writerows(zip(self._wiiTime, *self._accData))
        except IOError as error:
            dialog = gtk.MessageDialog(parent=None, 
                flags=gtk.DIALOG_DESTROY_WITH_PARENT, 
                type=gtk.MESSAGE_ERROR, 
                buttons=gtk.BUTTONS_OK, 
                message_format=str(error))
            dialog.set_title(error[1])
            dialog.connect('response', lambda dialog, response:dialog.destroy())
            dialog.show()
            
    def _save_zStarData(self, timeStr):
        fileName = os.sep.join([self.preferences['outputDir'], 
                                timeStr + "_zStar_acc" + ".dat"]
                              )
        try:
            with open(fileName, 'wb') as outFile:
                writer = csv.writer(outFile, 'excel-tab')
                outFile.write(writer.dialect.delimiter.join(("#time", "A")))
                outFile.write(writer.dialect.lineterminator)
                outFile.write(writer.dialect.delimiter.join(("#s", "g")))
                outFile.write(writer.dialect.lineterminator)
                with self._zStarDataLock:
                    writer.writerows(zip(self._zStarTime, self._zSdata))
        except IOError as error:
            dialog = gtk.MessageDialog(parent=None, 
                flags=gtk.DIALOG_DESTROY_WITH_PARENT, 
                type=gtk.MESSAGE_ERROR, 
                buttons=gtk.BUTTONS_OK, 
                message_format=str(error))
            dialog.set_title(error[1])
            dialog.connect('response', lambda dialog, response:dialog.destroy())
            dialog.show()

    def save(self, widget, data=None):
        """Signal handler for the save action
        
        """
        timeString = time.strftime("%Y-%m-%d_%H-%M-%S")
        self._save_WiiData(timeString)
        self._save_zStarData(timeString)

def NewXratersWindow():
    """NewXratersWindow - returns a fully instantiated
    XratersWindow object. Use this function rather than
    creating a XratersWindow directly.
    """

    #look for the ui file that describes the ui
    ui_filename = os.path.join(getdatapath(), 'ui', 'XratersWindow.ui')
    if not os.path.exists(ui_filename):
        ui_filename = None

    builder = gtk.Builder()
    builder.add_from_file(ui_filename)
    window = builder.get_object("xraters_window")
    window.finish_initializing(builder)
    return window

if __name__ == "__main__":
    #support for command line options
    import logging, optparse
    parser = optparse.OptionParser(version="%prog %ver")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="Show debug messages")
    (options, args) = parser.parse_args()

    #set the logging level to show debug messages
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug('logging enabled')

    #run the application
    window = NewXratersWindow()
    window.show()
    threads_init()
    gtk.main()

